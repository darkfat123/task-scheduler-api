// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO TASKS (
  CODE, NAME, FREQUENCY_DATE, FREQUENCY_TIME, MAX_RETRIES
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, code, name, frequency_date, frequency_time, next_run_at, last_run_at, max_retries, status, is_enabled, created_at, updated_at
`

type CreateTaskParams struct {
	Code          pgtype.Text
	Name          pgtype.Text
	FrequencyDate pgtype.Text
	FrequencyTime pgtype.Text
	MaxRetries    pgtype.Int4
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Code,
		arg.Name,
		arg.FrequencyDate,
		arg.FrequencyTime,
		arg.MaxRetries,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.FrequencyDate,
		&i.FrequencyTime,
		&i.NextRunAt,
		&i.LastRunAt,
		&i.MaxRetries,
		&i.Status,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTasks = `-- name: DeleteTasks :exec
DELETE FROM TASKS
WHERE ID = $1
`

func (q *Queries) DeleteTasks(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTasks, id)
	return err
}

const getEnabledTask = `-- name: GetEnabledTask :many
SELECT id, code, name, frequency_date, frequency_time, next_run_at, last_run_at, max_retries, status, is_enabled, created_at, updated_at FROM TASKS WHERE IS_ENABLED = TRUE
`

func (q *Queries) GetEnabledTask(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getEnabledTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.FrequencyDate,
			&i.FrequencyTime,
			&i.NextRunAt,
			&i.LastRunAt,
			&i.MaxRetries,
			&i.Status,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByCode = `-- name: GetTasksByCode :one
SELECT id, code, name, frequency_date, frequency_time, next_run_at, last_run_at, max_retries, status, is_enabled, created_at, updated_at FROM TASKS
WHERE CODE = $1 LIMIT 1
`

func (q *Queries) GetTasksByCode(ctx context.Context, code pgtype.Text) (Task, error) {
	row := q.db.QueryRow(ctx, getTasksByCode, code)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.FrequencyDate,
		&i.FrequencyTime,
		&i.NextRunAt,
		&i.LastRunAt,
		&i.MaxRetries,
		&i.Status,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, code, name, frequency_date, frequency_time, next_run_at, last_run_at, max_retries, status, is_enabled, created_at, updated_at FROM TASKS
ORDER BY ID
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.FrequencyDate,
			&i.FrequencyTime,
			&i.NextRunAt,
			&i.LastRunAt,
			&i.MaxRetries,
			&i.Status,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTasks = `-- name: UpdateTasks :exec
UPDATE TASKS
  SET NAME = $2,
  STATUS = $3
WHERE ID = $1
`

type UpdateTasksParams struct {
	ID     int32
	Name   pgtype.Text
	Status string
}

func (q *Queries) UpdateTasks(ctx context.Context, arg UpdateTasksParams) error {
	_, err := q.db.Exec(ctx, updateTasks, arg.ID, arg.Name, arg.Status)
	return err
}
